Object subclass: #Vehicles	instanceVariableNames: 'lineName stations duration'	classVariableNames: ''	poolDictionaries: ''	category: 'S2012400111'!!Vehicles methodsFor: 'accessing' stamp: 'Anonymous 5/21/2015 17:01'!lineName: anObject	lineName := anObject! !!Vehicles methodsFor: 'accessing' stamp: 'Anonymous 5/21/2015 17:01'!duration: anObject	duration := anObject! !!Vehicles methodsFor: 'accessing' stamp: 'Anonymous 5/21/2015 17:01'!duration	^ duration! !!Vehicles methodsFor: 'accessing' stamp: 'Anonymous 5/21/2015 17:02'!stations	^ stations! !!Vehicles methodsFor: 'accessing' stamp: 'Anonymous 5/21/2015 17:02'!stations: anObject	stations := anObject! !!Vehicles methodsFor: 'accessing' stamp: 'Anonymous 5/21/2015 17:01'!lineName	^ lineName! !Vehicles subclass: #Bus	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'S2012400111'!!Bus methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/21/2015 17:06'!price	^Bus price.! !!Bus methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/21/2015 17:04'!transshipmentChargeWithPrevious: aVehicle^Bus price / 2.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Bus class	instanceVariableNames: 'price'!!Bus class methodsFor: 'accessing' stamp: 'Anonymous 5/21/2015 17:07'!price	^ price! !!Bus class methodsFor: 'accessing' stamp: 'Anonymous 5/21/2015 17:07'!price: anObject	price := anObject! !!Bus class methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/21/2015 17:03'!withLineName: aLineName withStations: aStationArray withDuration: aDuration	| temp |	temp := self new.	temp lineName: aLineName.	temp stations: aStationArray.	temp duration: aDuration.	^temp.! !Object subclass: #PublicTransportation	instanceVariableNames: 'allVehicles'	classVariableNames: ''	poolDictionaries: ''	category: 'S2012400111'!!PublicTransportation methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/21/2015 17:37'!changeVehicleDurationWithLineName: aLineName withDuration: aDuration	(self getVehicleWithLineName: aLineName) duration: aDuration.! !!PublicTransportation methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/21/2015 22:57'!getStationNumberWithLineName: aLineName between: aStationName001 and: aStationName002	| array s1 s2 |	array := ( self getVehicleWithLineName: aLineName ) stations.	1 to: (array size) do: [ :i | 		( ( array at: i ) = aStationName001 ) ifTrue: [ s1 := i ].		( ( array at: i ) = aStationName002 ) ifTrue: [ s2 := i ]	].	^( s1 - s2 ) abs! !!PublicTransportation methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/21/2015 23:00'!getVehicleWithLineName: aLineName	^(allVehicles select: [ :each | (each lineName) = aLineName]) at: 1! !!PublicTransportation methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/21/2015 17:09'!initialize	super initialize	allVehicles: OrderedCollection new.! !!PublicTransportation methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/22/2015 01:08'!getTravelFrom: aStationName001 to: aStationName002	| vehiclesFrom001 vehiclesFrom002 arr  temp1 temp2 tempVehicles temp3 |	vehiclesFrom001 := self getVehiclesHasStation: aStationName001.	vehiclesFrom002 := self getVehiclesHasStation: aStationName002.	arr := OrderedCollection new.	vehiclesFrom001 do: [ :eachVehicle |		( vehiclesFrom002 includes: eachVehicle ) ifTrue: [ 			temp1 := OrderedCollection new.			temp1 add: eachVehicle lineName.			temp1 add: aStationName001.			temp1 add: aStationName002.			temp2 := OrderedCollection new.			temp2 add: temp1 asArray.			arr add: temp2 asArray.		].		eachVehicle stations do: [ :eachStation |			( ( eachStation = aStationName001 ) | ( eachStation = aStationName002 ) ) ifFalse: [ 				tempVehicles := self getVehiclesHasStation: eachStation.				tempVehicles do: [ :eachVehicle2 |					( ( vehiclesFrom002 includes: eachVehicle2 ) & ( ( eachVehicle lineName ) ~= ( eachVehicle2 lineName ) ) ) ifTrue: [ 						temp1 := OrderedCollection new.						temp1 add: eachVehicle lineName.						temp1 add: aStationName001.						temp1 add: eachStation.						temp2 := OrderedCollection new.						temp2 add: eachVehicle2 lineName.						temp2 add: eachStation.						temp2 add: aStationName002.						temp3 := OrderedCollection new.						temp3 add: temp1 asArray.						temp3 add: temp2 asArray.						arr add: temp3 asArray.					]				]			]    	   ]	].	^arr asArray! !!PublicTransportation methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/21/2015 17:10'!addVehicle: aVehicle	allVehicles add: aVehicle.! !!PublicTransportation methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/22/2015 01:22'!getLowestCostTravelFrom: aStationName001 to: aStationName002	| trips aTrip tempArr thePrice vehicle1 vehicle2 price1 price2 |	trips := self getTravelFrom: aStationName001 to: aStationName002.	tempArr := Array new:2.	tempArr at:1 put: (Float infinity).	1 to: (trips size) do: [ :i |		aTrip := ( trips at:i ).		( aTrip size = 1 ) ifTrue: [ 			vehicle1 := self getVehicleWithLineName: ( ( aTrip at:1 ) at:1 ).			thePrice := vehicle1 price.	   ] ifFalse: [ 			vehicle1 := self getVehicleWithLineName: ( ( aTrip at:1 ) at:1 ).			vehicle2 := self getVehicleWithLineName: ( ( aTrip at:2 ) at:1 ).			price1 := (vehicle1 price).			price2 := (vehicle2 transshipmentChargeWithPrevious: vehicle1).			thePrice := price1 + price2.	   ].		( thePrice < ( tempArr at:1 ) ) ifTrue: [ 			tempArr at:1 put:thePrice.			tempArr at:2 put:aTrip.   		]	].	^tempArr at:2! !!PublicTransportation methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/21/2015 17:48'!getVehiclesHasStation: aStationName	^allVehicles select: [ :each | each stations includes: aStationName ]! !!PublicTransportation methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/21/2015 18:52'!removeVehicleWithLineName: aLineName	allVehicles remove: ((allVehicles select: [ :each | each lineName = aLineName]) at: 1)! !!PublicTransportation methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/21/2015 18:12'!getVehiclesHasStation: aStationName withType: aType	^( self getVehiclesHasStation: aStationName ) select: [ :each | each isMemberOf: aType  ]! !!PublicTransportation methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/21/2015 22:02'!getStationsIntersect: aLineName001 with: aLineName002	| arr1 arr2 arr3 |	arr1 := ( self getVehicleWithLineName: aLineName001 ) stations.	arr2 := ( self getVehicleWithLineName: aLineName002 ) stations.	arr3 := OrderedCollection new.	arr1 do: [ :each |		( arr2 includes: each ) ifTrue: [ 			arr3 add: each		]	].	^arr3 asArray! !!PublicTransportation methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/22/2015 01:28'!getFastestTravelFrom: aStationName001 to: aStationName002	| trips aTrip tempArr vehicle1 vehicle2 numberOfStations1 theTime time1 numberOfStations2 time2 |	trips := self getTravelFrom: aStationName001 to: aStationName002.	tempArr := Array new:2.	tempArr at:1 put: (Float infinity).	1 to: (trips size) do: [ :i |		aTrip := ( trips at:i ).		( aTrip size = 1 ) ifTrue: [ 			vehicle1 := self getVehicleWithLineName: ( ( aTrip at:1 ) at:1 ).			numberOfStations1 := self getStationNumberWithLineName: ( ( aTrip at:1 ) at:1 ) between: ( ( aTrip at:1 ) at:2 ) and: ( ( aTrip at:1 ) at:3 ).			theTime := (vehicle1 duration) / ((vehicle1 stations) size) * numberOfStations1.	   ] ifFalse: [ 			vehicle1 := self getVehicleWithLineName: ( ( aTrip at:1 ) at:1 ).			numberOfStations1 := self getStationNumberWithLineName: ( ( aTrip at:1 ) at:1 ) between: ( ( aTrip at:1 ) at:2 ) and: ( ( aTrip at:1 ) at:3 ).			time1 := (vehicle1 duration) / ((vehicle1 stations) size) * numberOfStations1.			vehicle2 := self getVehicleWithLineName: ( ( aTrip at:2 ) at:1 ).			numberOfStations2 := self getStationNumberWithLineName: ( ( aTrip at:2 ) at:1 ) between: ( ( aTrip at:2 ) at:2 ) and: ( ( aTrip at:2 ) at:3 ).			time2 := (vehicle2 duration) / ((vehicle2 stations) size) * numberOfStations1.			theTime := time1 + time2.	   ].		( theTime < ( tempArr at:1 ) ) ifTrue: [ 			tempArr at:1 put:theTime.			tempArr at:2 put:aTrip.   		]	].	^tempArr at:2! !!PublicTransportation methodsFor: 'accessing' stamp: 'Anonymous 5/21/2015 17:08'!allVehicles: anObject	allVehicles := anObject! !!PublicTransportation methodsFor: 'accessing' stamp: 'Anonymous 5/21/2015 17:08'!allVehicles	^ allVehicles! !Vehicles subclass: #Subway	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'S2012400111'!!Subway methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/21/2015 17:06'!price	^Subway price.! !!Subway methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/21/2015 17:05'!transshipmentChargeWithPrevious: aVehicle^Subway price * 2 / 3.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Subway class	instanceVariableNames: 'price'!!Subway class methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/21/2015 17:03'!withLineName: aLineName withStations: aStationArray withDuration: aDuration	| temp |	temp := self new.	temp lineName: aLineName.	temp stations: aStationArray.	temp duration: aDuration.	^temp.! !!Subway class methodsFor: 'accessing' stamp: 'Anonymous 5/21/2015 17:07'!price	^ price! !!Subway class methodsFor: 'accessing' stamp: 'Anonymous 5/21/2015 17:07'!price: anObject	price := anObject! !Vehicles subclass: #Metrobus	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'S2012400111'!!Metrobus methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/21/2015 17:06'!price	^Metrobus price.! !!Metrobus methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/22/2015 01:18'!transshipmentChargeWithPrevious: aVehicle( aVehicle isMemberOf: Metrobus ) ifTrue: [ ^0 ]ifFalse: [ ^Metrobus price ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Metrobus class	instanceVariableNames: 'price'!!Metrobus class methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/21/2015 17:03'!withLineName: aLineName withStations: aStationArray withDuration: aDuration	| temp |	temp := self new.	temp lineName: aLineName.	temp stations: aStationArray.	temp duration: aDuration.	^temp.! !!Metrobus class methodsFor: 'accessing' stamp: 'Anonymous 5/21/2015 17:07'!price	^ price! !!Metrobus class methodsFor: 'accessing' stamp: 'Anonymous 5/21/2015 17:07'!price: anObject	price := anObject! !Vehicles subclass: #Minibus	instanceVariableNames: 'price'	classVariableNames: ''	poolDictionaries: ''	category: 'S2012400111'!!Minibus methodsFor: 'accessing' stamp: 'Anonymous 5/22/2015 01:47'!price	^price.! !!Minibus methodsFor: 'accessing' stamp: 'Anonymous 5/21/2015 17:01'!price: anObject	price := anObject! !!Minibus methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/22/2015 01:39'!transshipmentChargeWithPrevious: aVehicle^price.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Minibus class	instanceVariableNames: ''!!Minibus class methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/21/2015 17:03'!withLineName: aLineName withStations: aStationArray withDuration: aDuration withPrice: aPrice	| temp |	temp := self new.	temp lineName: aLineName.	temp stations: aStationArray.	temp duration: aDuration.	temp price: aPrice.	^temp.! !